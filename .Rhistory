set.seed(50)
b = delta + runif(10)
eff.d = cohen.d(a,b,paired=TRUE)
assert("Paired measures",abs(eff.d$estimate)-1.42 <0.01 )
# eff.dc = cohen.d(a,b,paired=TRUE,noncentral = TRUE)
# assert("Two samples from same population",eff.d$conf.int[1] < 0 & 0 < eff.d$conf.int[2]  )
#
#
# set.seed(22)
# a = rnorm(35,24,sqrt(148.87))
# mean(a)
# set.seed(31)
# b = rnorm(29,16.5,sqrt(139.16))
# mean(b)
# cohen.d(a,b,noncentral = TRUE)
# cohen.d(a,b)
#
clear
clear
treatment = c(10,10,20,20,20,30,30,30,40,50)
control = c(10,20,30,40,40,50)
cliff.delta(treatment,control,use.unbiased=F,use.normal=T)
library(effsize)
source("R/CliffDelta.R")
cliff.delta(treatment,control,use.unbiased=F,use.normal=T)
d = c(treatment,control)
f = rep(c("Treat","Control"),c(length(treatment),lenght(control)))
f = rep(c("Treat","Control"),c(length(treatment),length(control)))
cliff.delta(d,f,use.unbiased=F,use.normal=T)
cliff.delta(treatment,control,use.unbiased=F,use.normal=T)
median(treatment)
median(control)
f = rep(c("Control","Treat"),c(length(control),length(treatment)))
d = c(control,treatment)
f = rep(c("Control","Treat"),c(length(control),length(treatment)))
cliff.delta(d,f,use.unbiased=F,use.normal=T)
cliff.delta(treatment,control,use.unbiased=F,use.normal=T)
factor(c("B,"B","A"))
factor(c("B","B","A"))
factor(c("B","B","A"),levels=c("B","A"))
library(effsize)
library(effsize)
set.seed(60)
x = rnorm(10,mean=10)
y = rnorm(10,mean=12)
x
y
cohen.d(x,y,paired=TRUE)
x[4] <- NA
y[7] <- NA
eff.d = cohen.d(x,y,paired=TRUE)
eff.d
x = rnorm(10,mean=10)
y = rnorm(10,mean=12)
x[4] <- NA
cohen.d(x,y,paired=TRUE)
library(effsize)
cohen.d(x,y,paired=TRUE)
cohen.d(x,y,paired=TRUE,na.rm=TRUE)
rev(1:10)
4%3
4%%3
4%/%3
5%/%3
5%%3
1:10[-c(2,4,6)]
(1:10)[-c(2,4,6)]
library(effsize)
cohen.d(x,y,paired=TRUE,na.rm=TRUE)
treatment
control
d
treatment
control
treatment=x
control=y
d = c(treatment,control)
f = factor(rep(c("Treatment","Control"),c(length(treatment),length(control))),
levels=c("Treatment","Control"),ordered=T)
d
f
nas = is.na(d) | is.na(f);
nas
n=lenght(d)
n=length(d)
ids = which(nas)
ids = c(ids %% n/2, (ids %% n/s) + n/2)
ids = c(ids %% n/2, (ids %% n/2) + n/2)
ids
d <- d[ - ids]
f <- f[ - ids]
ns = table(f)
n1 = ns[1]
n2 = ns[2]
if(paired & (n1!=n2)){
n1
}
n1
n2
cohen.d()
library(effsize)
set.seed(60)
x = rnorm(10,mean=10)
y = rnorm(10,mean=12)
x[4] <- NA
cohen.d(x,y,paired=TRUE,na.rm=TRUE)
cohen.d(x,y,paired=TRUE)
treatment = x
control = y
paired = T
na.rm = T
d = c(treatment,control)
f = factor(rep(c("Treatment","Control"),c(length(treatment),length(control))),
levels=c("Treatment","Control"),ordered=T)
na.rm
na.rm
if(na.rm){
nas = is.na(d) | is.na(f);
if(paired){
n=length(d)
ids = which(nas)
ids = c(ids %% n/2, (ids %% n/2) + n/2)
d <- d[ - ids]
f <- f[ - ids]
}else{
d <- d[!nas];
f <- f[!nas];
}
}
d
f
ids
n=length(d)
n
nas
which(nas)
n/2
n=10
ids = which(nas)
ids
ids %% n/2
n/2
4 %% 5
ids
ids %% 5
ids %% (n/2)
ids %% (n/2)
c(ids %% (n/2), (ids %% (n/2)) + n/2)
library(effsize)
cohen.d(x,y,paired=TRUE,na.rm=TRUE)
x
y
set.seed(60)
x = rnorm(10,mean=10)
y = rnorm(10,mean=12)
cohen.d(x,y,paired=TRUE,na.rm=TRUE)
cohen.d(x,y,paired=TRUE,na.rm=TRUE)
which(c(FALSE,FALSE,FALSE))
nas = which(c(FALSE,FALSE,FALSE))
ids = which(c(FALSE,FALSE,FALSE))
n
c(ids %% (n/2), (ids %% (n/2)) + n/2)
ids = c(ids %% (n/2), (ids %% (n/2)) + n/2)
d[ - ids]
d
library(effsize)
cohen.d(x,y,paired=TRUE,na.rm=TRUE)
x[4] <- NA
cohen.d(x,y,paired=TRUE,na.rm=TRUE)
source('~/Documents/Dev/R/effsize/tests/testCohenD.R', echo=TRUE)
eff.d = cohen.d(x,y,paired=TRUE,na.rm=TRUE)
source("tests/testCohenD.R")
## Computes Cohen's d
## Cohen, J. (1988).
## Statistical power analysis for the behavioral sciences (2nd ed.).
## New York:Academic Press.
cohen.d <- function(d,...) UseMethod("cohen.d")
cohen.d.default = function(d,f,pooled=TRUE,paired=FALSE,na.rm=FALSE,
hedges.correction=FALSE,conf.level=0.95,noncentral=FALSE, ...){
if( ! any(c("numeric","integer") %in% class(d))){
stop("First parameter must be a numeric type")
}
if( any(c("character","factor") %in% class(f)) ){
## it is data and factor
if(length(f)!=length(d)){
stop("Data and factor must have the same length")
}
if( "character" %in% class(f)){
f = factor(f)
}
if(length(levels(f))!=2){
stop("Factor should have only two levels");
return;
}
}else{
## it is treatment and control
treatment = d
control = f
d = c(treatment,control)
f = factor(rep(c("Treatment","Control"),c(length(treatment),length(control))),
levels=c("Treatment","Control"),ordered=T)
}
if(na.rm){
nas = is.na(d) | is.na(f);
if(paired){
if(any(nas)){
n=length(d)
ids = which(nas)
ids = c(ids %% (n/2), (ids %% (n/2)) + n/2)
d <- d[ - ids]
f <- f[ - ids]
}
}else{
d <- d[!nas];
f <- f[!nas];
}
}
ns = table(f)
n1 = ns[1]
n2 = ns[2]
if(paired & (n1!=n2)){
stop("Paired computation requires equal number of measures.");
return;
}
m = c();
sd = c();
for( l in levels(f)){
m = c(m,mean(d[f==l]));
sd = c(sd,sd(d[f==l]));
}
delta.m = m[1] - m[2];
if(paired){
dd = (delta.m) / sd(diff(d,lag=n1));
}else
if(pooled){
pool_sd = sqrt(((n1-1)*sd[1]^2+(n2-1)*sd[2]^2)/(n1+n2-2))
dd = (delta.m) / pool_sd;
}else{
dd = (delta.m) / sd(d);
}
df = n1+n2-2
res = list()
if(hedges.correction){
# Hedges, L. V. & Olkin, I. (1985). Statistical methods for meta-analysis. Orlando, FL: Academic Press.
dd = dd * (1 - 3 / ( 4 * (n1+n2) - 9))
res$method = "Hedges's g"
res$name = "g"
}else{
res$method = "Cohen's d"
res$name = "d"
}
if(noncentral){
# Based on the document:
# David C. Howell (2010)
# Confidence Intervals on Effect Size
# https://www.uvm.edu/%7Edhowell/methods7/Supplements/Confidence%20Intervals%20on%20Effect%20Size.pdf
#
# Additional reference:
# Cumming, G.; Finch, S. (2001)
# A primer on the understanding, use, and calculation of confidence intervals
# that are based on central and noncentral distributions.
# Educational and Psychological Measurement, 61, 633-649.
#
if(paired){
t = mean(diff(d,lag=n1))/(sd(diff(d,lag=n1))/sqrt(n1))
df=n1-1
}else{
if(pooled) s = pool_sd
else s = sd(d)
t = delta.m / sqrt(s^2*(1/n1+1/n2))
}
end1 = t
while( pt(q=t,df=df,ncp=end1) > (1-conf.level)/2 ){
end1 = end1 * 2
}
ncp1 = uniroot(function(x) (1-conf.level)/2-pt(q=t,df=df,ncp=x),c(-5,end1))$root
end2 = t
while( pt(q=t,df=df,ncp=end2) > (1+conf.level)/2 ){
end2 = end2 * 2
}
cat("t: ",t,"  df:",df,"\n")
#       cat("-5 -> ",pt(q=t,df=df,ncp=-5),"\n")
#       cat(end2," -> ",pt(q=t,df=df,ncp=end2),"\n")
ncp2 = uniroot(function(x) (1+conf.level)/2-pt(q=t,df=df,ncp=x),c(-5,end2))$root
cat("ncp1:",ncp1,"\n")
cat("ncp2:",ncp2,"\n")
if(paired){
conf.int=sort(c(
ncp1/sqrt(df),
ncp2/sqrt(df)
));
}else{
conf.int=sort(c(
ncp1*sqrt(1/n1+1/n2),
ncp2*sqrt(1/n1+1/n2)
));
}
}else{
# The Handbook of Research Synthesis and Meta-Analysis
# (Cooper, Hedges, & Valentine, 2009)
# p 238
S_d = sqrt(((n1+n2)/(n1*n2) + .5*dd^2/df) * ((n1+n2)/df))
Z = -qt((1-conf.level)/2,df)
conf.int=c(
dd - Z*S_d,
dd + Z*S_d
);
}
names(conf.int)=c("inf","sup")
levels = c(0.2,0.5,0.8)
magnitude = c("negligible","small","medium","large")
## Cohen, J. (1992). A power primer. Psychological Bulletin, 112, 155-159. Crow, E. L. (1991).
res$estimate = dd
res$conf.int = conf.int
#  res$var = S_d
res$conf.level = conf.level
res$magnitude = factor(magnitude[findInterval(abs(dd),levels)+1],levels = magnitude,ordered=T)
#      variance.estimation = if(use.unbiased){ "Unbiased"}else{"Consistent"},
#      CI.distribution = if(use.normal){ "Normal"}else{"Student-t"}
class(res) <- "effsize"
return(res)
}
cohen.d.formula= function(formula, data=list(), ...){
mf <- model.frame(formula=formula, data=data)
if(dim(mf)[2]!=2){
stop("Formula must be a variable vs a factor")
}
d <- mf[[1]]
f <- mf[[2]]
if( ! any(c("character","factor") %in% class(f)) ){
warning("Cohercing rhs of formula to factor")
f = factor(f)
}
res = cohen.d.default(d,f,...)
return(res)
}
# set.seed(52)
# x = rnorm(100,mean=10)
# y = rnorm(100,mean=12)
# d = (c(x,y))
# f = rep(c("A","B"),each=100)
# eff.d = cohen.d(d,f)
# print(eff.d)
# eff.g = cohen.d(d,f,hedges.correction=TRUE)
# print(eff.g)
# set.seed(12345)
# d <- rnorm(200)
# f <- rep(c(1,2),400)
# cohen.d(d ~ factor(f))
### Cohen's d test
library(effsize)
library(tools)
assert <- function(label,condition){
cat(label,": ")
if(!condition){
cat("Failed!\n")
}else{
cat("OK.\n")
}
}
set.seed(52)
x = rnorm(100,mean=10)
y = rnorm(100,mean=12)
d = (c(x,y))
f = rep(c("A","B"),each=100)
eff.d = cohen.d(d,f)
assert("Two samples with large difference", eff.d$conf.int[1] < -2 & -2 < eff.d$conf.int[2]  )
eff.g = cohen.d(d,f,hedges.correction=TRUE)
assert("Two samples with Hedges G", eff.g$conf.int[1] < -2 & -2 < eff.g$conf.int[2]  )
set.seed(54)
d <- rnorm(200)
f <- rep(c(1,2),100)
assertWarning( eff.d <<- cohen.d(d ~ f) )
assert("Two samples from same population",eff.d$conf.int[1] < 0 & 0 < eff.d$conf.int[2]  )
## noncentrality t
delta = c(1.73, 1.06, 2.03, 1.40, 0.95, 1.13, 1.41, 1.73, 1.63, 1.56) - 1
set.seed(50)
a = delta
set.seed(50)
b = delta + runif(10)
eff.d = cohen.d(a,b,paired=TRUE)
assert("Paired measures",abs(eff.d$estimate)-1.42 <0.01 )
set.seed(60)
x = rnorm(10,mean=10)
y = rnorm(10,mean=12)
x[4] <- NA
eff.d = cohen.d(x,y,paired=TRUE,na.rm=TRUE)
# eff.dc = cohen.d(a,b,paired=TRUE,noncentral = TRUE)
# assert("Two samples from same population",eff.d$conf.int[1] < 0 & 0 < eff.d$conf.int[2]  )
#
#
# set.seed(22)
# a = rnorm(35,24,sqrt(148.87))
# mean(a)
# set.seed(31)
# b = rnorm(29,16.5,sqrt(139.16))
# mean(b)
# cohen.d(a,b,noncentral = TRUE)
# cohen.d(a,b)
#
set.seed(60)
x = rnorm(10,mean=10)
y = rnorm(10,mean=12)
x[4] <- NA
eff.d = cohen.d(x,y,paired=TRUE,na.rm=TRUE)
eff.d
source('~/Documents/Dev/R/effsize/tests/testCohenD.R', echo=TRUE)
### Cohen's d test
library(effsize)
library(tools)
assert <- function(label,condition){
cat(label,": ")
if(!condition){
cat("Failed!\n")
}else{
cat("OK.\n")
}
}
set.seed(52)
x = rnorm(100,mean=10)
y = rnorm(100,mean=12)
d = (c(x,y))
f = rep(c("A","B"),each=100)
eff.d = cohen.d(d,f)
assert("Two samples with large difference", eff.d$conf.int[1] < -2 & -2 < eff.d$conf.int[2]  )
eff.g = cohen.d(d,f,hedges.correction=TRUE)
assert("Two samples with Hedges G", eff.g$conf.int[1] < -2 & -2 < eff.g$conf.int[2]  )
set.seed(54)
d <- rnorm(200)
f <- rep(c(1,2),100)
assertWarning( eff.d <<- cohen.d(d ~ f) )
assert("Two samples from same population",eff.d$conf.int[1] < 0 & 0 < eff.d$conf.int[2]  )
## noncentrality t
delta = c(1.73, 1.06, 2.03, 1.40, 0.95, 1.13, 1.41, 1.73, 1.63, 1.56) - 1
set.seed(50)
a = delta
set.seed(50)
b = delta + runif(10)
eff.d = cohen.d(a,b,paired=TRUE)
assert("Paired measures",abs(eff.d$estimate)-1.42 <0.01 )
set.seed(60)
x = rnorm(10,mean=10)
y = rnorm(10,mean=12)
x[4] <- NA
eff.d = cohen.d(x,y,paired=TRUE,na.rm=TRUE)
assert("Paired measures w/NA",abs(eff.d$estimate)-1.73 <0.01 )
# eff.dc = cohen.d(a,b,paired=TRUE,noncentral = TRUE)
# assert("Two samples from same population",eff.d$conf.int[1] < 0 & 0 < eff.d$conf.int[2]  )
#
#
# set.seed(22)
# a = rnorm(35,24,sqrt(148.87))
# mean(a)
# set.seed(31)
# b = rnorm(29,16.5,sqrt(139.16))
# mean(b)
# cohen.d(a,b,noncentral = TRUE)
# cohen.d(a,b)
#
source('~/Documents/Dev/R/effsize/tests/testCohenD.R', echo=TRUE)
### Cohen's d test
library(effsize)
library(tools)
assert <- function(label,condition){
cat(label,": ")
if(!condition){
cat("Failed!\n")
}else{
cat("OK.\n")
}
}
set.seed(52)
x = rnorm(100,mean=10)
y = rnorm(100,mean=12)
d = (c(x,y))
f = rep(c("A","B"),each=100)
eff.d = cohen.d(d,f)
assert("Two samples with large difference", eff.d$conf.int[1] < -2 & -2 < eff.d$conf.int[2]  )
eff.g = cohen.d(d,f,hedges.correction=TRUE)
assert("Two samples with Hedges G", eff.g$conf.int[1] < -2 & -2 < eff.g$conf.int[2]  )
set.seed(54)
d <- rnorm(200)
f <- rep(c(1,2),100)
assertWarning( eff.d <<- cohen.d(d ~ f) )
assert("Two samples from same population",eff.d$conf.int[1] < 0 & 0 < eff.d$conf.int[2]  )
## noncentrality t
delta = c(1.73, 1.06, 2.03, 1.40, 0.95, 1.13, 1.41, 1.73, 1.63, 1.56) - 1
set.seed(50)
a = delta
set.seed(50)
b = delta + runif(10)
eff.d = cohen.d(a,b,paired=TRUE)
assert("Paired measures",abs(eff.d$estimate)-1.42 <0.01 )
set.seed(60)
x = rnorm(10,mean=10)
y = rnorm(10,mean=12)
x[4] <- NA
eff.d = cohen.d(x,y,paired=TRUE,na.rm=TRUE)
assert("Paired measures w/NA",abs(eff.d$estimate)-1.73 <0.01 )
# eff.dc = cohen.d(a,b,paired=TRUE,noncentral = TRUE)
# assert("Two samples from same population",eff.d$conf.int[1] < 0 & 0 < eff.d$conf.int[2]  )
#
#
# set.seed(22)
# a = rnorm(35,24,sqrt(148.87))
# mean(a)
# set.seed(31)
# b = rnorm(29,16.5,sqrt(139.16))
# mean(b)
# cohen.d(a,b,noncentral = TRUE)
# cohen.d(a,b)
#
